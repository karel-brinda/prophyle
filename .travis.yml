language: cpp

cache:
  - apt: true

matrix:
  include:

    - os: linux
      sudo: true
      compiler: gcc
      install:
        - sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
        - sudo apt-get update
        - sudo apt-get install g++-4.8 texinfo zlib1g-dev
        - sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 90
        - sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 90

        - if [ ! -d "$HOME/miniconda/bin" ]; then wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh && bash miniconda.sh -f -b -p $HOME/miniconda; fi
        - export PATH="$HOME/miniconda/bin:$PATH"
        - hash -r
        - conda config --set always_yes yes --set changeps1 no
        - conda config --add channels defaults
        - conda config --add channels conda-forge
        - conda config --add channels bioconda
        - conda update -q conda
        - conda info -a
        - if [ ! -d "$HOME/miniconda/envs/prophyle" ]; then conda create -q -n prophyle python==3.5 ete3 bitarray parallel psutil scipy sphinx codecov pysam; fi
        - source activate prophyle

    - os: osx
      compiler: clang-3.7
      install:
        - if [ ! -d "$HOME/miniconda/bin" ]; then wget https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O miniconda.sh && bash miniconda.sh -f -b -p $HOME/miniconda; fi
        - export PATH="$HOME/miniconda/bin:$PATH"
        - hash -r
        - conda config --set always_yes yes --set changeps1 no
        - conda config --add channels defaults
        - conda config --add channels conda-forge
        - conda config --add channels bioconda
        - conda update -q conda
        - conda info -a
        - if [ ! -d "$HOME/miniconda/envs/prophyle" ]; then conda create -q -n prophyle python==3.4 ete3 bitarray parallel psutil scipy sphinx pysam; fi
        - source activate prophyle

script:
  # see Makefile for details
  - unset PYTHONPATH
  - samtools --version
  # tests in the repo dir
  - make clean
    #- make test_repo
  - if [[ $(uname) == "Linux" ]]; then make coverage; else make test; fi
  # tests in the package dir
  - make clean
  - pip --version
  - rm requirements.txt
  - make install
  - make test_package

after_success:
- if [[ $(uname) == "Linux" ]]; then coverage combine .coverage.*; codecov -t $CODECOV_TOKEN; fi

cache:
  directories:
  - $HOME/miniconda

